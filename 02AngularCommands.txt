Install Node, it will also install NPM
------------------------------------------
node version v14.15.5
	> node --version
npm version 6.14.11
	> npm --version 
angular version 11.2.0
	> ng --version
ionic version 6.13.1
	> inic --version 
------------------------------------------

To update NPM

> npm install -g npm

Than install angular by issuing the following command

> npm install -g @angular/cli

To uninstall 

> npm uninstall -g @angular/cli

Then, run (--force flag might be required)

> npm cache clean

or, if you're using npm > 5.

> npm cache verify

To install a specific version issue following command

> npm install -g @angular/cli@wished.version.here

------------------------------------------

Angular CLI commands

    https://www.npmjs.com/package/@angular/cli/v/11.1.2
    https://www.javatpoint.com/angular-7-all-cli-commands
    https://angular.io/guide/setup-local  
	
	Observables: https://academind.com/learn/javascript/understanding-rxjs/

------------------------------------------ 
    
Some helpful extensions for Angular when using visual studio code. Get the latest version of these.
    1. Angular and then select Angular v7 Snippets by john papa
    2. Angular Files 1.6.2 Alexander Ivanichev
    4. Angular Language Service 0.1.10 by Angular
    5. Angular2-switcher by infinity1207
    6. Auto Rename Tag 0.0.15 Jun Han
    7. Bracket Pair Colorizer CoenraadS
    8. Debugger for Chrome Microsoft 4.11.0
    9. Material Icon Theme Philipp Kief 3.6.0
    10. Path Intellisense Christian Kohler 1.4.2
    11. Prettier - Code formatter Esben Petersen 1.6.1
    12. TSLint egamma 1.4.40
	13. Angular essential John Papa version 11
	14. 

------------------------------------------
Create the Anuglar app 

>ng new XXX
>cd XXX
>ng serve to run

By default ng serve will open the app on port 4200. To change the port use 

>ng serve --port 4201

To stop ng serve, instead of killing the whole process or using ctrl+z, you can simply use ctrl+c to stop the server and can happily use ng serve command without any errors. 
------------------------------------------
To install bootstarp locally
 	>npm install --save bootstrap@X where X is the bootstrap version 

Then add it to the angular.json, styles array. make sure that bootstrap is the first one.
-----------------------------------------------------
Buid 
	> ng build


------------------------------------------------------
Create Component
	OLD
		>ng g c value --spec false
		>ng generate component value --spec false
	NOW 
		>ng g c value --skip-tests true
		>ng generate component value --skip-tests true
------------------------------------------------------		
Create Class
	>ng g class models/NAME --type=model --skip-tests true

	There are two ways to create the class. 

    export class Recipe {
	  public name: string;
	  constructor(name: string){
		this.name = name;
	  }
	}
	
    export class Ingredient {
	  constructor(public name: string){  }
	}
-----------------------------------------------------
Directives
	*ngIf (* is required since it is structural directive)
		<div *ngIf="isValid;else other_content">
			content here ...
		</div>
		<ng-template #other_content>other content here...</ng-template>
	ngStyle	
	ngClass
	*ngFor (* is required since it is structural directive)
		*ngFor="let item of servers; let i = index;"
	
------------------------------------------------------
INPUT and OUTPUT (custom event binding)
	INPUT 
		Child Component (with alias)
			import { Component, Input, OnInit } from '@angular/core';
			@Input('elementInfo') element: string;
		Parent Component (with alias)
			<app-server-element *ngFor="let serverElement of serverElements" [elementInfo]="serverElement"></app-server-element>
	
	OUTPUT 
		Child Component (with alias)
			import { Component, OnInit, EventEmitter, Output } from '@angular/core';
			@Output('serverCreatedEvent') serverCreated = new EventEmitter<name: string>();
			@Output('blueprintCreatedEvent') blueprintCreated = new EventEmitter<name: string>();
			
			Then emit the event 
			
			onAddServer() {
				this.serverCreated.emit('server');
			}

			onAddBlueprint() {
				this.blueprintCreated.emit('blueprint');
			}
			
		Parent Component (with alias)
			<app-cockpit (serverCreatedEvent)="onServerAdded($event)" (blueprintCreatedEvent)="onBlueprintAdded($event)"></app-cockpit>
			
			  serverElements = [];

			  onServerAdded(serverData: {serverName: string, serverContent: string}) {
				this.serverElements.push({
				  type: 'server',
				  name: serverData.serverName,
				  content: serverData.serverContent
				});

				console.log(this.serverElements);
			  }

			  onBlueprintAdded(blueprintData: {serverName: string, serverContent: string}) {
				this.serverElements.push({
				  type: 'blueprint',
				  name: blueprintData.serverName,
				  content: blueprintData.serverContent
				});

				console.log(this.serverElements);
			  }
------------------------------------------------------
Local Reference
	It is always on the html, #SomeName. Gives the reference to the html element. 
	On the componet side use it as SomeName.value if applied to the input. Make sure to pass it as part of your button click. 
------------------------------------------------------	
@ViewChild()
	Instead of:
		@ViewChild('serverContentInput') serverContentInput: ElementRef;
	use
		@ViewChild('serverContentInput', {static: true}) serverContentInput: ElementRef;
	
	The same change (add { static: true } as a second argument) needs to be applied to ALL usages of @ViewChild() (and also @ContentChild()) 
		If you plan on accessing the selected element inside of ngOnInit().

	If you DON'T access the selected element in ngOnInit (but anywhere else in your component), set static: false 
------------------------------------------------------
Projecting Content with ng-content	
	it is a directive. In the parent components html file put 
		<ng-content></ng-content>
	and then in the child component html file, place the html content where you are calling the child component. 
------------------------------------------------------	
@ContentChild()
	Place a reference on <p> tag which in the in the parent component which is passing the content to ng-template
		<p #contentParagraph>

	Then on the child component that has the ng-template, do the following

	import ElementRef from angular core
			import { Component, ContentChild, ElementRef, Input, OnInit } from '@angular/core';
		@ContentChild('contentParagraph', {static: true}) paragraph: ElementRef;

	and finally
		import AfterContentInit from angular core
			import { AfterContentInit, Component, ContentChild, ElementRef, Input, OnInit } from '@angular/core';
		add to the interfaces list
			export class ServerElementComponent implements OnInit, AfterContentInit {
		and then create the ngAfterContentInit hook and console log the content of the paragraph tag
			ngAfterContentInit(){
				console.log(`ParagraphContent:${this.paragraph.nativeElement.textContent}`);
			}
------------------------------------------------------
Getting the parameter from the routes
	inject via constructor 
		private activatedRoute: ActivatedRoute
	
	and then use it as 
		this.activatedRoute.paramMap.subscribe(parmMap => {
		  if(!parmMap.has('recipeId')){
			//redirect
			return;
		  }
		  const recipeId = parmMap.get('recipeId');

		  this.recipe = this.recipesService.getRecipe(recipeId);
		});
-------------------------------------------------------
To create a link from the html 
	[routerLink]="['./', recipe.id]"
	 or 
	[routerLink]="['/recipes', recipe.id]"
-------------------------------------------------------
Navigating from the ts page 
	this.router.navigateByUrl('/places/tabs/discover');
	this.router.navigate(['/places/tabs/discover']);
	